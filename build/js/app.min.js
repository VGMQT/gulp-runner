"use strict";!function(){var __webpack_modules__={"./dev/js/app.js":function devJsAppJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_common_addClassnameAfterDelay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/common/addClassnameAfterDelay */ \"./dev/js/modules/common/addClassnameAfterDelay.js\");\n;\n\n(0,_modules_common_addClassnameAfterDelay__WEBPACK_IMPORTED_MODULE_0__.default)('.greeting__picture', 'm--show');\n\n\n//# sourceURL=webpack://@vgerasimovich/gulp-tasker/./dev/js/app.js?")},"./dev/js/modules/common/addClassnameAfterDelay.js":function devJsModulesCommonAddClassnameAfterDelayJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\nconst addClassnameAfterDelay = (selector, classname, delay = 1000) => {\n  setTimeout(() => {\n    document.querySelector(selector).classList.add(classname);\n  }, delay);\n};\n\n/* harmony default export */ __webpack_exports__["default"] = (addClassnameAfterDelay);\n\n\n//# sourceURL=webpack://@vgerasimovich/gulp-tasker/./dev/js/modules/common/addClassnameAfterDelay.js?')}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var _=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](_,_.exports,__webpack_require__),_.exports}__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__("./dev/js/app.js"),__webpack_require__("./dev/js/modules/common/addClassnameAfterDelay.js")}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
